package flow;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.text.SimpleDateFormat;
import java.util.Date;

import com.avaya.sce.runtimecommon.IVariable;
import com.avaya.sce.runtimecommon.IVariableField;
import com.avaya.sce.runtimecommon.SCESession;
import com.tp.utils.CustomTracking;
import com.tp.utils.Utils;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 5 DE NOVIEMBRE DE 2019 9:45:05 COT
 */
public class codIni extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 5 DE NOVIEMBRE DE 2019 9:45:05 COT
	 */
	public codIni() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}
	
	@Override
	public void requestBegin(SCESession mySession) {

		super.requestBegin(mySession);
		
		SimpleDateFormat formatoInicio = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");	
		String fechaInicio = formatoInicio.format(new Date());	
		IVariable VariableFechaInicioLLamada = mySession.getVariable(IProjectVariables.FECHA_INICIO_LLAMADA);  
		VariableFechaInicioLLamada.getSimpleVariable().setValue(fechaInicio);
		
		CustomTracking.info(mySession, "Ingresa llamada con el DNIS : " + mySession.getVariableField(IProjectVariables.SESSION,IProjectVariables.SESSION_FIELD_DNIS).getStringValue());
		CustomTracking.info(mySession, "Ingresa llamada con el ANI : " + mySession.getVariableField(IProjectVariables.SESSION,IProjectVariables.SESSION_FIELD_ANI).getStringValue());
		CustomTracking.info(mySession, "Ingresa llamada con el UCID : " + mySession.getVariableField(IProjectVariables.SESSION,IProjectVariables.SESSION_FIELD_UCID).getStringValue());
		CustomTracking.info(mySession, "Ingresa llamada con el SessionID : " + mySession.getVariableField(IProjectVariables.SESSION,IProjectVariables.SESSION_FIELD_SESSIONID).getStringValue());
		
		IVariableField strMessageError = mySession.getVariableField(IProjectVariables.ERROR__MESSAGE);
		strMessageError.setValue("");
		
		IVariableField strFIle = mySession.getVariableField(IProjectVariables.STRING_JSONFILE); 
		BufferedReader br= null;
		FileReader fr = null;
		try {
			String sConfigFile = "";	
			String sPath = getServletContext().getRealPath("/") + "data/";
			sConfigFile = sPath + "VariablesIniciales.json";
			CustomTracking.info(mySession, "Archivo Json con Propiedades : "+sConfigFile);
			mySession.setProperty("PATH",sPath);
			File Archivo = new File (sConfigFile);
			CustomTracking.info(mySession, "Archivo existe : "+Archivo.exists());
			if(Archivo.exists())
			{
				fr = new FileReader(Archivo);
				br = new BufferedReader(fr);
				String line;
				StringBuilder sb = new StringBuilder();

				while((line=br.readLine())!= null)
				{
				    sb.append(line.trim());
				}
				
				strFIle.setValue(sb.toString().trim());
				br.close();
				fr.close();
				
				IVariable varConfiguracion = mySession.getVariable(IProjectVariables.VAR_CONFIGURACION);  
				
				if(!Utils.FillComplexVar(varConfiguracion, "Configuracion", sb.toString().trim(), mySession)) 
				{
					throw new Exception("FillComplexVar varConfiguracion json");
				}
				
				CustomTracking.debug(mySession, "Carga de archivo de configuracion realizada");
				
				strMessageError.setValue("OK");
			}
			else
			{
				throw new Exception("No se encontro el archivo de configuracion en la ruta " + sConfigFile);
			}
		} catch (Exception e) {
			strMessageError.setValue("ERROR");
			CustomTracking.error(mySession, "Error cargando archivo de configuracion : " + e.getMessage());
		}
		finally
		{
			Utils.closeQuietly(fr);
			Utils.closeQuietly(br);
		}
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: (timestamp generation disabled)
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: (timestamp generation disabled)
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: (timestamp generation disabled)
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "ERROR_MESSAGE", com.avaya.sce.runtime.Expression.STRING_EQUAL_IGNORE, "OK", false).setDebugId(265)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("codRegistrarLlamada", "Default").setDebugId(93));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("retFin", "Error").setDebugId(270));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	
	
}

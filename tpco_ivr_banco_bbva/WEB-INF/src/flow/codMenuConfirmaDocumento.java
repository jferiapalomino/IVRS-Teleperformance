package flow;

import com.avaya.sce.runtimecommon.SCESession;
import com.tp.utils.CustomTracking;
import com.tp.utils.Utils;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: NOVEMBER 13, 2019 2:36:46 PM COT
 */
public class codMenuConfirmaDocumento extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: NOVEMBER 13, 2019 2:36:46 PM COT
	 */
	public codMenuConfirmaDocumento() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}
	
	@Override
	public void requestBegin(SCESession mySession) {
		// TODO Auto-generated method stub
		super.requestBegin(mySession);
		try{		
			String value = mySession.getVariableField(IProjectVariables.MEN_CONFIRMA_DOCUMENTO,IProjectVariables.MEN_CONFIRMA_DOCUMENTO_FIELD_VALUE).getStringValue();
			int NoInput = mySession.getVariableField(IProjectVariables.MEN_CONFIRMA_DOCUMENTO,IProjectVariables.MEN_CONFIRMA_DOCUMENTO_FIELD_NOINPUTCOUNT).getIntValue();
			int NoMatch = mySession.getVariableField(IProjectVariables.MEN_CONFIRMA_DOCUMENTO,IProjectVariables.MEN_CONFIRMA_DOCUMENTO_FIELD_NOMATCHCOUNT).getIntValue();
			int Repeticiones = mySession.getVariableField(IProjectVariables.VAR_CONFIGURACION,IProjectVariables.VAR_CONFIGURACION_FIELD_REPETICIONES).getIntValue();
			
			int IntentosMenu = mySession.getVariable(IProjectVariables.INTENTOS_MENU).getSimpleVariable().getIntValue();
			IntentosMenu = IntentosMenu + 1;
			mySession.getVariable(IProjectVariables.INTENTOS_MENU).getSimpleVariable().setValue(IntentosMenu);


			if(NoInput >= 1) {
				Utils.agregarOpcion("NoInput", "No ingreso opci贸n - Menu Confirma Documento", mySession, "", "", "", "", "9", "5");				
			}else {
				if (NoMatch >= 1) {
					Utils.agregarOpcion("NoMatch", "Opci贸n no validar - Menu Confirma Documento", mySession, "", "", "", "", "9", "5");							
				}else {	
					switch (value) {
						case "1":
							mySession.getVariable(IProjectVariables.OPCION_MENU).getSimpleVariable().setValue("1. Confirmar");
							Utils.agregarOpcion("Opcion1", "Opci贸n 1 - Confirmar", mySession, "", "", "", "1", "9", "5");
							mySession.getVariable(IProjectVariables.INTENTOS_MENU).getSimpleVariable().setValue("0");
							break;
						case "2":
							mySession.getVariable(IProjectVariables.OPCION_MENU).getSimpleVariable().setValue("2. De lo contrario");
							Utils.agregarOpcion("Opcion2", "Opci贸n 2 - De lo contrario", mySession, "", "", "", "2", "9", "5");
							mySession.getVariable(IProjectVariables.INTENTOS_MENU).getSimpleVariable().setValue("0");
							break;
					}
				}
			}
			
			if(IntentosMenu >= Repeticiones) {
				Utils.agregarOpcion("ExcedeIntentos", "Excede intentos - Menu Confirma Documento", mySession, "", "", "", "", "9", "5");
			}
		}catch(Exception ex){
			CustomTracking.error(mySession, ex.getMessage());
		}
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: (timestamp generation disabled)
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: (timestamp generation disabled)
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: (timestamp generation disabled)
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "menConfirmaDocumento:noinputcount", com.avaya.sce.runtime.Expression.INT_GREATER_THEN_EQUAL, "1", false).setDebugId(5050)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("datValidaIntentosMenuConfirmaDocumento", "NoInput").setDebugId(5051));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		}


		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "menConfirmaDocumento:nomatchcount", com.avaya.sce.runtime.Expression.INT_GREATER_THEN_EQUAL, "1", false).setDebugId(5052)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("datValidaIntentosMenuConfirmaDocumento", "NoMatch").setDebugId(5053));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		}


		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition3", "menConfirmaDocumento:value", com.avaya.sce.runtime.Expression.STRING_EQUAL, "1", false).setDebugId(5054)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("menPrincipal", "1").setDebugId(5055));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		}


		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition4", "menConfirmaDocumento:value", com.avaya.sce.runtime.Expression.STRING_EQUAL, "2", false).setDebugId(5056)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("datRepetirDigitarDocumento", "2").setDebugId(5057));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		}

		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
	

}

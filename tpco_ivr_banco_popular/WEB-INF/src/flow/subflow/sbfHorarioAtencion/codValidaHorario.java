package flow.subflow.sbfHorarioAtencion;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

import com.avaya.sce.runtimecommon.IComplexVariable;
import com.avaya.sce.runtimecommon.SCESession;
import com.tp.utils.CustomTracking;
import com.tp.utils.HolidayUtil;
import com.tp.utils.Utils;

import flow.IProjectVariables;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: (timestamp generation disabled)
 */
public class codValidaHorario extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: (timestamp generation disabled)
	 */
	public codValidaHorario() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}
	
	
	@Override
	public void requestBegin(SCESession mySession) {
		// TODO Auto-generated method stub
		super.requestBegin(mySession);
		try {

			IComplexVariable varConfig = mySession.getVariable(IProjectVariables.VAR_CONFIGURACION)
					.getComplexVariable();
			boolean sabado = varConfig.getField(IProjectVariables.VAR_CONFIGURACION_FIELD_HABILITAR_HORARIO_SABADO)
					.getBooleanValue();
			boolean domingo = varConfig.getField(IProjectVariables.VAR_CONFIGURACION_FIELD_HABILITAR_HORARIO_DOMINGO)
					.getBooleanValue();
			boolean festivo = varConfig.getField(IProjectVariables.VAR_CONFIGURACION_FIELD_HABILITAR_HORARIO_FESTIVOS)
					.getBooleanValue();
			boolean flagFestivo = false;
			
			String diasNoTrabajables = varConfig.getField(IProjectVariables.VAR_CONFIGURACION_FIELD_DIAS_NO_TRABAJABLES).getStringValue();

			CustomTracking.debug(mySession, "Validando sabados: " + sabado);
			CustomTracking.debug(mySession, "Validando domingos: " + domingo);
			CustomTracking.debug(mySession, "Validando festivos: " + festivo);

			SimpleDateFormat dateFormatHM = new SimpleDateFormat("HH:mm");

			CustomTracking.info(mySession, "Validando horarios...");

			Calendar calendar = Calendar.getInstance();
			Calendar rightNow = Calendar.getInstance();
			String horaMinuto = dateFormatHM.format(rightNow.getTime());
			Date horaMinLlamada = dateFormatHM.parse(horaMinuto);

			int dayOfMonth = calendar.get(Calendar.DAY_OF_MONTH);
			int month = calendar.get(Calendar.MONTH);
			int year = calendar.get(Calendar.YEAR);
			HolidayUtil holidayUtil = new HolidayUtil(year);
			flagFestivo = holidayUtil.isHoliday(month, dayOfMonth);


			int diaSemana = calendar.get(Calendar.DAY_OF_WEEK);
			
			String nombredia = obtenerNombrediaSemana(diaSemana);
			
			//Validacion dias no laborables
			String mesNoTrabajable = ""+(calendar.get(Calendar.MONTH) + 1);
			String diaNoTrabajable = ""+calendar.get(Calendar.DAY_OF_MONTH);
			
			String recorridoDiasNoTrabajable[] = diasNoTrabajables.split(",");
			for (String recorridoDiaNoTrabaja : recorridoDiasNoTrabajable) {
				String mes = recorridoDiaNoTrabaja.split("-")[0];
				String dia = recorridoDiaNoTrabaja.split("-")[1];
				if(mesNoTrabajable.equals(mes)){
					if(diaNoTrabajable.equals(dia)){
						Utils.agregarOpcion("DiaNoTrabajable", "Día no trabajable", mySession, "", "","", "", "9", "5");
						mySession.getVariable(IProjectVariables.FLAG_HORARIO).getSimpleVariable().setValue("0");
						CustomTracking.debug(mySession,"Día no trabajable: " + nombredia);
						return;
					}
				}
			}	

			// Validación festivos

			if (festivo) {
				if (flagFestivo) {
					String horarioFestivo = varConfig.getField(IProjectVariables.VAR_CONFIGURACION_FIELD_HORARIO_FESTIVOS).getStringValue();
					String horaInicioFestivo = horarioFestivo.split("-")[0];
					String horaFinFestivo = horarioFestivo.split("-")[1];
					Date dHoraInicioFestivo = dateFormatHM.parse(horaInicioFestivo);
					Date dHoraFinFestivo = dateFormatHM.parse(horaFinFestivo);
					if (horaMinLlamada.equals(dHoraInicioFestivo) || (horaMinLlamada.after(dHoraInicioFestivo) && horaMinLlamada.before(dHoraFinFestivo))) {
						Utils.agregarOpcion("EnHorarioFestivo", "En horario dia festivo", mySession, "", "", "", "","9", "5");
						mySession.getVariable(IProjectVariables.FLAG_HORARIO).getSimpleVariable().setValue("1");
						CustomTracking.debug(mySession,"En horario para el dia festivo: " + calendar.get(Calendar.DAY_OF_WEEK));
						return;
					} else {
						Utils.agregarOpcion("FueraDeHorarioFestivo", "Fuera de horario dia festivo", mySession, "", "","", "", "9", "5");
						mySession.getVariable(IProjectVariables.FLAG_HORARIO).getSimpleVariable().setValue("0");
						CustomTracking.debug(mySession,"Fuera de Horario para dia festivo: " + calendar.get(Calendar.DAY_OF_WEEK));
						return;
					}
				}
			} else {
				if (flagFestivo) {
					Utils.agregarOpcion("FestivoNoLaboral", "Festivo no laboral", mySession, "", "", "", "", "9", "5");
					mySession.getVariable(IProjectVariables.FLAG_HORARIO).getSimpleVariable().setValue("0");
					CustomTracking.debug(mySession,"No se esta validando el horario para el dia festivo: "
									+ calendar.get(Calendar.DAY_OF_WEEK));
					return;
				}
			}

			// Validación dias de la semana
			
			if ((diaSemana >= Calendar.MONDAY) && (diaSemana <= Calendar.FRIDAY)) {
				String horarioSemana = varConfig.getField(IProjectVariables.VAR_CONFIGURACION_FIELD_HORARIO_SEMANA).getStringValue();
				String horaInicioSemana = horarioSemana.split("-")[0];
				String horaFinSemana = horarioSemana.split("-")[1];
				Date HoraInicioSemana = dateFormatHM.parse(horaInicioSemana);
				Date HoraFinSemana = dateFormatHM.parse(horaFinSemana);
				if (horaMinLlamada.equals(HoraInicioSemana) || (horaMinLlamada.after(HoraInicioSemana) && horaMinLlamada.before(HoraFinSemana))) {
					Utils.agregarOpcion("EnHorarioSemana", "En horario dia "+nombredia, mySession, "", "", "", "", "9","5");
					mySession.getVariable(IProjectVariables.FLAG_HORARIO).getSimpleVariable().setValue("1");
					CustomTracking.debug(mySession,"En Horario dia " + nombredia);
				} else {
					Utils.agregarOpcion("FueraDeHorarioSemana", "Fuera de horario dia "+nombredia, mySession, "", "", "","", "9", "5");
					mySession.getVariable(IProjectVariables.FLAG_HORARIO).getSimpleVariable().setValue("0");
					CustomTracking.debug(mySession,"Fuera de Horario dia " + nombredia);
				}
				// Validación dias sábados
			} else if (diaSemana == Calendar.SATURDAY) {
				if (sabado) {
					String horarioSabado = varConfig.getField(IProjectVariables.VAR_CONFIGURACION_FIELD_HORARIO_SABADO).getStringValue();
					String horaInicioSabado = horarioSabado.split("-")[0];
					String horaFinSabado = horarioSabado.split("-")[1];
					Date HoraInicioSabado = dateFormatHM.parse(horaInicioSabado);
					Date HoraFinSabado = dateFormatHM.parse(horaFinSabado);
					if (horaMinLlamada.equals(HoraInicioSabado) || (horaMinLlamada.after(HoraInicioSabado) && horaMinLlamada.before(HoraFinSabado))) {
						Utils.agregarOpcion("EnHorarioSabado", "En horario dia sabado", mySession, "", "", "", "", "9","5");
						mySession.getVariable(IProjectVariables.FLAG_HORARIO).getSimpleVariable().setValue("1");
						CustomTracking.debug(mySession,"En Horario dia sabado");
					} else {
						Utils.agregarOpcion("FueraDeHorarioSabado", "Fuera de horario dia sabado", mySession, "", "","", "", "9", "5");
						mySession.getVariable(IProjectVariables.FLAG_HORARIO).getSimpleVariable().setValue("0");
						CustomTracking.debug(mySession,"Fuera de Horario dia sabado");
					}
				} else {
					Utils.agregarOpcion("SabadoNoLaboral", "Sabado no laboral", mySession, "", "", "", "", "9", "5");
					mySession.getVariable(IProjectVariables.FLAG_HORARIO).getSimpleVariable().setValue("0");
					CustomTracking.debug(mySession,"No se esta validando el horario para el dia sabado");
				}
				// Validación dias domingos
			} else if (diaSemana == Calendar.SUNDAY) {
				if (domingo) {
					String horarioDomingo = varConfig
							.getField(IProjectVariables.VAR_CONFIGURACION_FIELD_HORARIO_DOMINGO).getStringValue();
					if (!horarioDomingo.isEmpty()) {
						String horaInicioDomingo = horarioDomingo.split("-")[0];
						String horaFinDomingo = horarioDomingo.split("-")[1];
						Date HoraInicioDomingo = dateFormatHM.parse(horaInicioDomingo);
						Date HoraFinDomingo = dateFormatHM.parse(horaFinDomingo);
						if (horaMinLlamada.equals(HoraInicioDomingo) || (horaMinLlamada.after(HoraInicioDomingo) && horaMinLlamada.before(HoraFinDomingo))) {
							Utils.agregarOpcion("EnHorarioDomingo", "En horario dia domingo", mySession, "", "", "", "","9", "5");
							mySession.getVariable(IProjectVariables.FLAG_HORARIO).getSimpleVariable().setValue("1");
							CustomTracking.debug(mySession,"En Horario dia domingo");
						} else {
							Utils.agregarOpcion("FueraDeHorarioDomingo", "Fuera de horario dia domingo", mySession, "","", "", "", "9", "5");
							mySession.getVariable(IProjectVariables.FLAG_HORARIO).getSimpleVariable().setValue("0");
							CustomTracking.debug(mySession,"Fuera de Horario dia domingo");
						}
					} else {
						mySession.getVariable(IProjectVariables.FLAG_HORARIO).getSimpleVariable().setValue("0");
						CustomTracking.debug(mySession,"Fuera de Horario dia domingo");
					}
				} else {
					Utils.agregarOpcion("DomingoNoLaboral", "Domingo no laboral", mySession, "", "", "", "", "9", "5");
					mySession.getVariable(IProjectVariables.FLAG_HORARIO).getSimpleVariable().setValue("0");
					CustomTracking.debug(mySession,"No se esta validando el horario para el dia domingo");
				}
			}

		} catch (Exception e) {
			CustomTracking.error(mySession,"Error validando Horario: " + e.getMessage());
		}
	}
	
	public String obtenerNombrediaSemana(int dia) {
		String nombredia = "";
		switch (dia) {
		case 1:	
			nombredia = "domingo";
			break;
		case 2:
			nombredia = "lunes";			
			break;
		case 3:
			nombredia = "martes";			
			break;
		case 4:
			nombredia = "miercoles";			
			break;
		case 5:
			nombredia = "jueves";			
			break;
		case 6:
			nombredia = "viernes";			
			break;
		case 7:	
			nombredia = "sabado";	
			break;
		default:
			nombredia = "lunes";
			break;
		}	
		return nombredia;
		
	}
	
	
//	public static void main(String[] args) {
//
//		Calendar calendar = Calendar.getInstance();
//		Calendar rightNow = Calendar.getInstance();
//		String mesNoTrabajable = ""+(calendar.get(Calendar.MONTH) + 1);
//		String diaNoTrabajable = ""+(calendar.get(Calendar.MONTH) + 1);
//		mesNoTrabajable = "12";
//		diaNoTrabajable = "26";
//		String diasNoTrabajables = "1-1,12-25";
//		String recorridoDiasNoTrabajable[] = diasNoTrabajables.split(",");
//		for (String recorridoDiaNoTrabaja : recorridoDiasNoTrabajable) {
//			String mes = recorridoDiaNoTrabaja.split("-")[0];
//			String dia = recorridoDiaNoTrabaja.split("-")[1];
//			if(mesNoTrabajable.equals(mes)){
//				if(diaNoTrabajable.equals(dia)){
//					System.out.println("dia no trabajable");
//					return;
//				}
//			}
//		}	
//	}
	
	
	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: (timestamp generation disabled)
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: (timestamp generation disabled)
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: (timestamp generation disabled)
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "flagHorario", com.avaya.sce.runtime.Expression.INT_EQUAL, "1", false).setDebugId(11)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("sbfHorarioAtencion-retEnHorario", "En horario").setDebugId(7));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("sbfHorarioAtencion-MenFueraHorario", "Fuera de horario").setDebugId(13));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}

package flow;

import java.net.InetAddress;

import com.avaya.sce.runtimecommon.IComplexVariable;
import com.avaya.sce.runtimecommon.SCESession;
import com.tp.utils.CustomTracking;
import com.tp.utils.RegistrarLLamada;
import com.tp.utils.Utils;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: 5 DE NOVIEMBRE DE 2019 10:43:50 COT
 */
public class codRegistrarLlamada extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: 5 DE NOVIEMBRE DE 2019 10:43:50 COT
	 */
	public codRegistrarLlamada() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}
	
	@Override
	public void requestBegin(SCESession mySession) {
		// TODO Auto-generated method stub
		super.requestBegin(mySession);
		
		try{		
			
			CustomTracking.info(mySession, "Inicia registro inicial de llamada en txt ... ");
			
			RegistrarLLamada.RegistroLlamada(mySession);
			
			CustomTracking.info(mySession, "Finaliza registro inicial de llamada en txt ... ");
			
			Utils.agregarOpcion("Inicio", "Inicio", mySession, "", "", "", "", "9", "5");

			IComplexVariable varConfiguracion = mySession.getVariable(IProjectVariables.VAR_CONFIGURACION).getComplexVariable();
			String applicationName = varConfiguracion.getField(IProjectVariables.VAR_CONFIGURACION_FIELD_NOMBRE_APLICACION).getStringValue();
			String applicationId = varConfiguracion.getField(IProjectVariables.VAR_CONFIGURACION_FIELD_CODIGO_APLICACION).getStringValue();
			String url = varConfiguracion.getField(IProjectVariables.VAR_CONFIGURACION_FIELD_URL_CONSULTA_LOG_IVR).getStringValue();
			
			IComplexVariable session = mySession.getVariable(IProjectVariables.SESSION).getComplexVariable();
			String ucid = session.getField(IProjectVariables.SESSION_FIELD_UCID).getStringValue();
			String ani = session.getField(IProjectVariables.SESSION_FIELD_ANI).getStringValue();
			String dnis = session.getField(IProjectVariables.SESSION_FIELD_DNIS).getStringValue();
			String sessionId = session.getField(IProjectVariables.SESSION_FIELD_SESSIONID).getStringValue();
			
			/*Seteo de variables para consumo de web servicio registerCall*/
			IComplexVariable registerCall = mySession.getVariable(IProjectVariables.REQUEST_REGISTER_CALL).getComplexVariable();
			registerCall.getField(IProjectVariables.REQUEST_REGISTER_CALL_FIELD_ANI).setValue(ani);
			registerCall.getField(IProjectVariables.REQUEST_REGISTER_CALL_FIELD_DNIS).setValue(dnis);
			registerCall.getField(IProjectVariables.REQUEST_REGISTER_CALL_FIELD_SESSION_ID).setValue(sessionId);
			registerCall.getField(IProjectVariables.REQUEST_REGISTER_CALL_FIELD_UCID).setValue(ucid);
			registerCall.getField(IProjectVariables.REQUEST_REGISTER_CALL_FIELD_APP_NAME).setValue(applicationName);
			registerCall.getField(IProjectVariables.REQUEST_REGISTER_CALL_FIELD_APPLICATION_ID).setValue(applicationId);
			registerCall.getField(IProjectVariables.REQUEST_REGISTER_CALL_FIELD_IP_WAS).setValue(InetAddress.getLocalHost().getHostAddress());
			
			IComplexVariable webRequest = mySession.getVariable(IProjectVariables.WEB_REQUEST).getComplexVariable();
			webRequest.getField(IProjectVariables.WEB_REQUEST_FIELD_URL).setValue(url);
			webRequest.getField(IProjectVariables.WEB_REQUEST_FIELD_METHOD).setValue("Call/RegisterCall");
			webRequest.getField(IProjectVariables.WEB_REQUEST_FIELD_PARAMETERS).setValue(IProjectVariables.REQUEST_REGISTER_CALL);
			
			CustomTracking.info(mySession, "Inicia registro inicial de llamada en db ... ");
			
			Utils.sendPost(mySession);
			String callID = webRequest.getField(IProjectVariables.WEB_REQUEST_FIELD_RESPONSE).getStringValue();
			if(!callID.isEmpty()){
				mySession.setProperty("callID", callID);
			}else{
				mySession.setProperty("callID","0");
			}
			CustomTracking.info(mySession, "Finaliza registro inicial de llamada ... ");
		}catch(Exception ex){
			mySession.setProperty("callID","0");
			CustomTracking.error(mySession, "Error registrando llamada : " + ex.getMessage());
			//e.printStackTrace();
		}
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: (timestamp generation disabled)
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = new com.avaya.sce.runtime.Next("codSplitAAI", "Default");
		next.setDebugId(99);
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: (timestamp generation disabled)
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: (timestamp generation disabled)
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}

}
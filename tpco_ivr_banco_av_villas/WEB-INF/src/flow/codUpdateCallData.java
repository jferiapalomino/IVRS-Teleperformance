package flow;

import java.net.InetAddress;
import java.text.SimpleDateFormat;
import java.util.Date;

import org.json.JSONArray;
import org.json.JSONObject;

import com.avaya.sce.runtimecommon.IComplexVariable;
import com.avaya.sce.runtimecommon.IVariableField;
import com.avaya.sce.runtimecommon.SCESession;
import com.tp.utils.AccionesArchivoTxt;
import com.tp.utils.CustomTracking;
import com.tp.utils.RegistrarLLamada;
import com.tp.utils.Utils;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: (timestamp generation disabled)
 */
public class codUpdateCallData extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: (timestamp generation disabled)
	 */
	public codUpdateCallData() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}
	
	

	@Override
	public void requestBegin(SCESession mySession) {
		// TODO Auto-generated method stub
		super.requestBegin(mySession);
		
		try {
			
			String fechaFin = mySession.getVariable(IProjectVariables.FECHA_FIN_LLAMADA).getSimpleVariable().getStringValue();
			if(fechaFin.equals("")) {
				SimpleDateFormat formatofin = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");	   
				fechaFin = formatofin.format(new Date());
				mySession.getVariable(IProjectVariables.FECHA_FIN_LLAMADA).getSimpleVariable().setValue(fechaFin);
			}
			
			IVariableField strMessageError = mySession.getVariableField(IProjectVariables.ERROR__MESSAGE);
			strMessageError.setValue("");
			
        	//--------------------------------------------------------------------------------------------------------------
			
        	CustomTracking.info(mySession,"Inicia validacion JsonOptionsNavigation");
        	
			String TipoFinalizacion = mySession.getVariable(IProjectVariables.VAR_SYSTEM_ERRORS).getComplexVariable().getField(IProjectVariables.VAR_SYSTEM_ERRORS_FIELD_TIPO_FINALIZACION).getStringValue();
			String eventMessage = mySession.getVariable(IProjectVariables.VAR_SYSTEM_ERRORS).getComplexVariable().getField(IProjectVariables.VAR_SYSTEM_ERRORS_FIELD_EVENT_MESSAGE).getStringValue();
			
			JSONArray navigation = new JSONArray();
			if (null != mySession.getProperty("JsonOptionsNavigation")) {
				navigation = (JSONArray) mySession.getProperty("JsonOptionsNavigation");
			}
			
			if(TipoFinalizacion.equalsIgnoreCase("FinalizaUsuario")) {
				
				//Validar si el usuario colgo durante una transferencia, se debe reemplazar la etiqueta TransferenciaAsesor por FinalizaUsuario y no insertar la etiqueta en la lista
            	boolean sw = false;
            	for (int i=0; i < navigation.length(); i++){
            	    JSONObject itemArr = (JSONObject)navigation.get(i);
            	    if(itemArr.get("Option").equals("TransferenciaAsesor")){
            	    	itemArr.put("Option", "FinalizaUsuario");
            	        itemArr.put("Description", "Finaliza Usuario");
            	        sw = true;
            	        break;
            	    }
            	}
            	
            	if (!sw) {
            		Utils.agregarOpcion(TipoFinalizacion, eventMessage, mySession, "", "", "", "", "9", "5");
            	}

			} else if(TipoFinalizacion.equalsIgnoreCase("error.badfetch") || TipoFinalizacion.equalsIgnoreCase("error.runtime") || TipoFinalizacion.equalsIgnoreCase("error.semantic")) {
				
				//Validar si el error se presento durante una transferencia, eliminar la etiqueta TransferenciaAsesor

				boolean flagTransferencia = false;
				int index = 0;
	        	for (int i=0; i < navigation.length(); i++){
	        	    JSONObject itemArr = (JSONObject)navigation.get(i);
	        	    if(itemArr.get("Option").equals("TransferenciaAsesor")){
	        	    	index = i;
	        	    	flagTransferencia = true;
	        	        break;
	        	    }
	        	}
	        	if (flagTransferencia) {
	            	navigation.remove(index);
	        	}
	        	
	        	Utils.agregarOpcion(TipoFinalizacion, eventMessage, mySession, "", "", "", "", "9", "5");
				
			} else {
				
				Utils.agregarOpcion(TipoFinalizacion, eventMessage, mySession, "", "", "", "", "9", "5");
			}

			//Se valida si ya se encuentra la etiqueta de Fin de llamada, se elimina y se vuelve a insertar al final de la lista
			boolean flagFinLlamada = false;
			int index = 0;
        	for (int i=0; i < navigation.length(); i++){
        	    JSONObject itemArr = (JSONObject)navigation.get(i);
        	    if(itemArr.get("Option").equals("Fin")){
        	    	index = i;
        	        flagFinLlamada = true;
        	        break;
        	    }
        	}
        	if (flagFinLlamada) {
            	navigation.remove(index);
        	}
        	
        	Utils.agregarOpcion("Fin", "Fin IVR", mySession, "", "", "", "", "9", "5");
				
        	CustomTracking.info(mySession,"Finaliza validacion JsonOptionsNavigation");
			
        	//--------------------------------------------------------------------------------------------------------------
			
        	IComplexVariable varConfiguracion = mySession.getVariable(IProjectVariables.VAR_CONFIGURACION).getComplexVariable();
			String applicationName = varConfiguracion.getField(IProjectVariables.VAR_CONFIGURACION_FIELD_NOMBRE_APLICACION).getStringValue();
			String applicationId = varConfiguracion.getField(IProjectVariables.VAR_CONFIGURACION_FIELD_CODIGO_APLICACION).getStringValue();
			String url = varConfiguracion.getField(IProjectVariables.VAR_CONFIGURACION_FIELD_URL_CONSULTA_LOG_IVR).getStringValue();
			String codTerminacion = mySession.getVariable(IProjectVariables.VAR_SYSTEM_ERRORS).getComplexVariable().getField(IProjectVariables.VAR_SYSTEM_ERRORS_FIELD_COD_FINALIZACION).getStringValue();
			
			navigation = new JSONArray();
			if (null != mySession.getProperty("JsonOptionsNavigation")) {
				navigation = (JSONArray) mySession.getProperty("JsonOptionsNavigation");
			}
			
			String callId = "0";
			if (null != mySession.getProperty("callID")) {
				callId =  mySession.getProperty("callID").toString();
			}	
			String sessionId = mySession.getVariableField(IProjectVariables.SESSION,IProjectVariables.SESSION_FIELD_SESSIONID).getStringValue();
			String ucid = mySession.getVariableField(IProjectVariables.SESSION,IProjectVariables.SESSION_FIELD_UCID).getStringValue();
			String dnis = mySession.getVariableField(IProjectVariables.SESSION,IProjectVariables.SESSION_FIELD_DNIS).getStringValue();
			String uui = mySession.getVariable(IProjectVariables.UUI).getSimpleVariable().getStringValue();
			String ani = mySession.getVariableField(IProjectVariables.SESSION,IProjectVariables.SESSION_FIELD_ANI).getStringValue();
			String documento = mySession.getVariableField(IProjectVariables.DOCUMENTO).getStringValue();

			String destinationNumber = "";
			if(codTerminacion.equalsIgnoreCase("2") || codTerminacion.equalsIgnoreCase("1") || codTerminacion.equalsIgnoreCase("5") || codTerminacion.equalsIgnoreCase("4")) {
				destinationNumber = mySession.getVariable(IProjectVariables.VDN_DESBORDE).getSimpleVariable().getStringValue().replace("6112", "");
			}
			
			String ipWas = InetAddress.getLocalHost().getHostAddress();
			
			IComplexVariable updateCall = mySession.getVariable(IProjectVariables.REQUEST_UPDATE_CALL_DATA).getComplexVariable();
			updateCall.getField(IProjectVariables.REQUEST_UPDATE_CALL_DATA_FIELD_ADDITIONAL_DATA_1).setValue("");
			updateCall.getField(IProjectVariables.REQUEST_UPDATE_CALL_DATA_FIELD_ADDITIONAL_DATA_2).setValue(""); 
			updateCall.getField(IProjectVariables.REQUEST_UPDATE_CALL_DATA_FIELD_ADDITIONAL_DATA_3).setValue(""); 
			updateCall.getField(IProjectVariables.REQUEST_UPDATE_CALL_DATA_FIELD_ADDITIONAL_DATA_4).setValue("");
			updateCall.getField(IProjectVariables.REQUEST_UPDATE_CALL_DATA_FIELD_ADDITIONAL_DATA_5).setValue(""); 
			updateCall.getField(IProjectVariables.REQUEST_UPDATE_CALL_DATA_FIELD_ADDITIONAL_DATA_6).setValue(""); 
			updateCall.getField(IProjectVariables.REQUEST_UPDATE_CALL_DATA_FIELD_ADDITIONAL_DATA_7).setValue(""); 
			updateCall.getField(IProjectVariables.REQUEST_UPDATE_CALL_DATA_FIELD_ADDITIONAL_DATA_8).setValue(""); 
			updateCall.getField(IProjectVariables.REQUEST_UPDATE_CALL_DATA_FIELD_ADDITIONAL_DATA_9).setValue("");
			updateCall.getField(IProjectVariables.REQUEST_UPDATE_CALL_DATA_FIELD_ADDITIONAL_DATA_1_0).setValue("");
			updateCall.getField(IProjectVariables.REQUEST_UPDATE_CALL_DATA_FIELD_ADDITIONAL_DATA_1_1).setValue("");
			updateCall.getField(IProjectVariables.REQUEST_UPDATE_CALL_DATA_FIELD_ADDITIONAL_DATA_1_2).setValue("");
			updateCall.getField(IProjectVariables.REQUEST_UPDATE_CALL_DATA_FIELD_ANI).setValue(ani);
			updateCall.getField(IProjectVariables.REQUEST_UPDATE_CALL_DATA_FIELD_APPLICATION_ID).setValue(applicationId);
			updateCall.getField(IProjectVariables.REQUEST_UPDATE_CALL_DATA_FIELD_APP_NAME).setValue(applicationName);
			updateCall.getField(IProjectVariables.REQUEST_UPDATE_CALL_DATA_FIELD_CALL_ID).setValue(callId);
			updateCall.getField(IProjectVariables.REQUEST_UPDATE_CALL_DATA_FIELD_DESTINATION_NUMBER).setValue(destinationNumber);
			updateCall.getField(IProjectVariables.REQUEST_UPDATE_CALL_DATA_FIELD_DNIS).setValue(dnis);
			updateCall.getField(IProjectVariables.REQUEST_UPDATE_CALL_DATA_FIELD_DOCUMENT_NUMBER).setValue(documento);
			updateCall.getField(IProjectVariables.REQUEST_UPDATE_CALL_DATA_FIELD_DOCUMENT_TYPE).setValue("");
			updateCall.getField(IProjectVariables.REQUEST_UPDATE_CALL_DATA_FIELD_IP_WAS).setValue(ipWas);
			updateCall.getField(IProjectVariables.REQUEST_UPDATE_CALL_DATA_FIELD_JSON_OPTIONS_NAVIGATION).setValue(navigation.toString());
			updateCall.getField(IProjectVariables.REQUEST_UPDATE_CALL_DATA_FIELD_SESSION_ID).setValue(sessionId);
			updateCall.getField(IProjectVariables.REQUEST_UPDATE_CALL_DATA_FIELD_TERMINATION).setValue(codTerminacion);
			updateCall.getField(IProjectVariables.REQUEST_UPDATE_CALL_DATA_FIELD_UCID).setValue(ucid);
			updateCall.getField(IProjectVariables.REQUEST_UPDATE_CALL_DATA_FIELD_UUI).setValue(uui);
			
        	//--------------------------------------------------------------------------------------------------------------
			//Antes de realizar la peticion POST, se debe actualizar la llamada en el txt para evitar algun error baftech
        	
        	CustomTracking.info(mySession,"Inicia actualizacion de llamada en txt ... ");
    		
			RegistrarLLamada.RegistroLlamada(mySession);
			
			CustomTracking.info(mySession,"Fin actualizacion de llamada en txt ... ");
			
		  	//--------------------------------------------------------------------------------------------------------------
			
			IComplexVariable webRequest = mySession.getVariable(IProjectVariables.WEB_REQUEST).getComplexVariable();
			webRequest.getField(IProjectVariables.WEB_REQUEST_FIELD_URL).setValue(url);
			webRequest.getField(IProjectVariables.WEB_REQUEST_FIELD_METHOD).setValue("Call/UpdateCallData");
			webRequest.getField(IProjectVariables.WEB_REQUEST_FIELD_PARAMETERS).setValue(IProjectVariables.REQUEST_UPDATE_CALL_DATA);
			   					
			CustomTracking.info(mySession, "Inicia actualizacion llamada en db ... ");
			
			if(Utils.sendPost(mySession)) {
				CustomTracking.info(mySession, "Llamada actualizada con exito");
				strMessageError.setValue("OK");
				AccionesArchivoTxt.EliminarArchivo(mySession);   
			} else {
				strMessageError.setValue("ERROR");
				CustomTracking.info(mySession, "Llamada no actualizada en base de datos.");
			}
			
			CustomTracking.info(mySession,"Finaliza actualizacion llamada ... ");
			
		} catch (Exception ex) {
			CustomTracking.error(mySession, "Error actualizando llamada: " + ex.getMessage());
			ex.printStackTrace();
		}	
	}

	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: (timestamp generation disabled)
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: (timestamp generation disabled)
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: (timestamp generation disabled)
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "varSystemErrors:codFinalizacion", com.avaya.sce.runtime.Expression.STRING_EQUAL, "1", false).setDebugId(4802)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("retFin", "Error IVR").setDebugId(4803));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition2", "varSystemErrors:codFinalizacion", com.avaya.sce.runtime.Expression.STRING_EQUAL, "5", false).setDebugId(4804)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("retFin", "Error Cliente").setDebugId(4805));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition3", "varSystemErrors:codFinalizacion", com.avaya.sce.runtime.Expression.STRING_EQUAL, "2", false).setDebugId(4806)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("trkInfoDesborde", "Transferencia").setDebugId(4807));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("retFin", "Terminar").setDebugId(4809));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}

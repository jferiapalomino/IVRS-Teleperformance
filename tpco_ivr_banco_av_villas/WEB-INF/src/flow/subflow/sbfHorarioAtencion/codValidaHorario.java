package flow.subflow.sbfHorarioAtencion;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

import com.avaya.sce.runtimecommon.IComplexVariable;
import com.avaya.sce.runtimecommon.SCESession;
import com.tp.utils.CustomTracking;
import com.tp.utils.Utils;

import flow.IProjectVariables;

/**
 * The Data class handles many types of server-side operations including data
 * collection (from a data sources such as a database, or web service), variable
 * assignments and operations (like copying variable values, performing mathematic
 * operations, and collection iteration), conditional evaluation to control callflow
 * execution based on variable values, and logging/tracing statements.
 * 
 * Items created in the getDataActions() method are executed/evaluated in order
 * and if a condional branch condition evaluates to "true" then the branch is
 * activated and the execution of data actions is halted.  If no "true" conditions
 * are encountered, then all data actions will be executed/evaluated and the 
 * application will proceed to the "Default" servlet.
 * Last generated by Orchestration Designer at: (timestamp generation disabled)
 */
public class codValidaHorario extends com.avaya.sce.runtime.Data {

	//{{START:CLASS:FIELDS
	//}}END:CLASS:FIELDS

	/**
	 * Default constructor
	 * Last generated by Orchestration Designer at: (timestamp generation disabled)
	 */
	public codValidaHorario() {
		//{{START:CLASS:CONSTRUCTOR
		super();
		//}}END:CLASS:CONSTRUCTOR
	}
	
	
	@SuppressWarnings("deprecation")
	@Override
	public void requestBegin(SCESession mySession) {
		// TODO Auto-generated method stub
		super.requestBegin(mySession);
		try {		
			
			IComplexVariable varConfig= mySession.getVariable(IProjectVariables.VAR_CONFIGURACION).getComplexVariable();
			SimpleDateFormat dateFormatHM = new SimpleDateFormat("HH:mm");

			String festivosColombia = mySession.getVariableField(IProjectVariables.VAR_CONFIGURACION,IProjectVariables.VAR_CONFIGURACION_FIELD_FESTIVOS_COLOMBIA).getStringValue();
			boolean habilitarHorarioSabado = mySession.getVariableField(IProjectVariables.VAR_CONFIGURACION,IProjectVariables.VAR_CONFIGURACION_FIELD_HABILITAR_HORARIO_SABADO).getBooleanValue();
			
			Date date = new Date();
			Calendar calendar = Calendar.getInstance();
			calendar.setTime(date);

			String mesActual = ""+(calendar.get(Calendar.MONTH) + 1);
			String diaMes =  ""+calendar.get(Calendar.DAY_OF_MONTH);
			
			boolean flagFestivo = false;
			String festivos = festivosColombia;
			
			String Festivos[] = festivos.split(",");
			for (String festivo : Festivos) {
				String mes = festivo.split("-")[0];
				String dia = festivo.split("-")[1];
				if(mesActual.equals(mes)){
					if(diaMes.equals(dia)){
						flagFestivo = true;
						mySession.getVariable(IProjectVariables.FLAG_FESTIVO).getSimpleVariable().setValue("1");
						break;
					}
				}
			}				
			
			if (flagFestivo) {
				mySession.getVariable(IProjectVariables.FLAG_HORARIO).getSimpleVariable().setValue("0");
				CustomTracking.debug(mySession, "Fuera de Horario para día festivo: " + diaMes);
				Utils.agregarOpcion("Fuera horario", "Validacion de horario", mySession, "", "", "", "", "9", "5");		
				return;
			}				
		
		
			Calendar rightNow = Calendar.getInstance();
			
			String horaMinuto = dateFormatHM.format(rightNow.getTime());
			Date horaMinLlamada = dateFormatHM.parse(horaMinuto);
			int diaSemana = calendar.get(Calendar.DAY_OF_WEEK);
			String nombredia = obtenerNombrediaSemana(diaSemana);
			
			
			if ((diaSemana >= Calendar.MONDAY) && (diaSemana <= Calendar.FRIDAY)){	
				String horario = varConfig.getField(IProjectVariables.VAR_CONFIGURACION_FIELD_HORARIO_SEMANA).getStringValue();	
				CustomTracking.debug(mySession, "Horario para el día "+nombredia+": " + horario);				
				String horaInicio = horario.split("-")[0];
				String horaFin = horario.split("-")[1];
				Date HoraInicio = dateFormatHM.parse(horaInicio);
				Date HoraFin = dateFormatHM.parse(horaFin);
				if (horaMinLlamada.equals(HoraInicio) || (horaMinLlamada.after(HoraInicio) && horaMinLlamada.before(HoraFin))) {
					CustomTracking.info(mySession, "Hora actual: "+horaMinLlamada.getHours()+":"+horaMinLlamada.getMinutes());	
					mySession.getVariable(IProjectVariables.FLAG_HORARIO).getSimpleVariable().setValue("1");
					CustomTracking.info(mySession, "En Horario para el día "+nombredia);			
					Utils.agregarOpcion("En horario", "Validacion de horario", mySession, "", "", "", "", "9", "5");					
				} else {
					CustomTracking.info(mySession, "Hora actual: "+horaMinLlamada.getHours()+":"+horaMinLlamada.getMinutes());
					mySession.getVariable(IProjectVariables.FLAG_HORARIO).getSimpleVariable().setValue("0");
					CustomTracking.info(mySession, "Fuera de Horario para el día "+nombredia);	
					Utils.agregarOpcion("Fuera horario", "Validacion de horario", mySession, "", "", "", "", "9", "5");							
				}
				
			} else if(diaSemana == Calendar.SATURDAY && habilitarHorarioSabado){	
				String horarioSabado = varConfig.getField(IProjectVariables.VAR_CONFIGURACION_FIELD_HORARIO_SABADO).getStringValue();	
				CustomTracking.debug(mySession, "Horario para el día "+nombredia+": " + horarioSabado);				
				String horaInicio = horarioSabado.split("-")[0];
				String horaFin = horarioSabado.split("-")[1];
				Date HoraInicio = dateFormatHM.parse(horaInicio);
				Date HoraFin = dateFormatHM.parse(horaFin);
				if (horaMinLlamada.equals(HoraInicio) || (horaMinLlamada.after(HoraInicio) && horaMinLlamada.before(HoraFin))) {
					CustomTracking.info(mySession, "Hora actual: "+horaMinLlamada.getHours()+":"+horaMinLlamada.getMinutes());
					mySession.getVariable(IProjectVariables.FLAG_HORARIO).getSimpleVariable().setValue("1");
					CustomTracking.info(mySession, "En Horario para el día "+nombredia);		
					Utils.agregarOpcion("En horario", "Validacion de horario", mySession, "", "", "", "", "9", "5");	
				} else {
					CustomTracking.info(mySession, "Hora actual: "+horaMinLlamada.getHours()+":"+horaMinLlamada.getMinutes());
					mySession.getVariable(IProjectVariables.FLAG_HORARIO).getSimpleVariable().setValue("0");
					CustomTracking.info(mySession, "Fuera de Horario para el día "+nombredia);			
					Utils.agregarOpcion("Fuera horario", "Validacion de horario", mySession, "", "", "", "", "9", "5");				
				}
				
			} else if(diaSemana == Calendar.SUNDAY){
				CustomTracking.info(mySession, "Hora actual: "+horaMinLlamada.getHours()+":"+horaMinLlamada.getMinutes());
				mySession.getVariable(IProjectVariables.FLAG_HORARIO).getSimpleVariable().setValue("0");
				CustomTracking.info(mySession, "Fuera de Horario para el día "+nombredia);	
				Utils.agregarOpcion("Fuera horario", "Validacion de horario", mySession, "", "", "", "", "9", "5");	
			}else {
				CustomTracking.info(mySession, "Hora actual: "+horaMinLlamada.getHours()+":"+horaMinLlamada.getMinutes());
				mySession.getVariable(IProjectVariables.FLAG_HORARIO).getSimpleVariable().setValue("0");
				CustomTracking.debug(mySession, "Fuera de Horario para el día " + nombredia);
				Utils.agregarOpcion("Fuera horario", "Validacion de horario", mySession, "", "", "", "", "9", "5");		
			}
		} catch (Exception e) {
			CustomTracking.error(mySession,  "Error validando Horario: "+ e.getMessage());
		}
	}
	
	public String obtenerNombrediaSemana(int dia) {
		String nombredia = "";
		switch (dia) {
		case 1:	
			nombredia = "domingo";
			break;
		case 2:
			nombredia = "lunes";			
			break;
		case 3:
			nombredia = "martes";			
			break;
		case 4:
			nombredia = "miercoles";			
			break;
		case 5:
			nombredia = "jueves";			
			break;
		case 6:
			nombredia = "viernes";			
			break;
		case 7:	
			nombredia = "sabado";	
			break;
		default:
			nombredia = "lunes";
			break;
		}	
		return nombredia;
		
	}
	
	
	/**
	 * Returns the Next item which will forward application execution
	 * to the next form in the call flow.
	 * Last generated by Orchestration Designer at: (timestamp generation disabled)
	 */
	public com.avaya.sce.runtime.Next getNext(com.avaya.sce.runtimecommon.SCESession mySession) {
		com.avaya.sce.runtime.Next next = null;
		return next;
	}
	/**
	 * Create a list of local variables used by items in the data node.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: (timestamp generation disabled)
	 */
	public java.util.Collection<VariableInfo> getLocalVariables(){
		java.util.Collection<VariableInfo> variables = new java.util.ArrayList<VariableInfo>();

		return variables;
	}
	/**
	 * Creates and conditionally executes operations that have been configured
	 * in the Callflow.  This method will build a collection of operations and
	 * have the framework execute the operations by calling evaluateActions().
	 * If the evaluation causes the framework to forward to a different servlet
	 * then execution stops.
	 * Returning true from this method means that the framework has forwarded the
	 * request to a different servlet.  Returning false means that the default
	 * Next will be invoked.
	 * 
	 * This method is generated automatically by the code generator
	 * and should not be manually edited.  Manual edits may be overwritten
	 * by the code generator.
	 * Last generated by Orchestration Designer at: (timestamp generation disabled)
	 */
	public boolean executeDataActions(com.avaya.sce.runtimecommon.SCESession mySession) throws Exception {
		java.util.Collection actions = null;

		actions = new java.util.ArrayList(1);
		if(evaluateActions(actions, mySession)) {
			return true;
		}
		actions = null;

		if(((com.avaya.sce.runtime.Condition)new com.avaya.sce.runtime.Condition("condition1", "flagHorario", com.avaya.sce.runtime.Expression.INT_EQUAL, "1", false).setDebugId(11)).evaluate(mySession)) {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("sbfHorarioAtencion-retEnHorario", "En horario").setDebugId(7));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;

		} else {
			actions = new java.util.ArrayList(1);
			actions.add(new com.avaya.sce.runtime.Next("sbfHorarioAtencion-MenFueraHorario", "Fuera de horario").setDebugId(13));
			if(evaluateActions(actions, mySession)) {
				return true;
			}
			actions = null;
		}


		// return false if the evaluation of actions did not cause a servlet forward or redirect
		return false;
	}
}
